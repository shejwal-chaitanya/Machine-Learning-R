}
}
calculateAvgMonthlyTransaction <- function(data, inBound) {
avgAmount <- transactions$calculateAvgMonthlyTransaction(data, inBound, configData)
addAccountTransactionDetails(unique(data$AccountNumber), avgAmount, inBound)
}
avgMonthlyCreditTransactionAmount <- function(data) {
# Extracting distinct account numbers using factor object
accountNumbers <- factor(data$AccountNumber)
for(currentAccountNumber in levels(accountNumbers)) {
recordData <- subset(data, data$AccountNumber == currentAccountNumber)
recordData <- subset(recordData, format(as.Date(recordData$Date), "%Y-%m") != format(as.Date(Sys.Date()), "%Y-%m"))
if (nrow(recordData) >=1 ) {
creditTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundCreditType)
if (nrow(creditTransactionData) >= 1) {
calculateAvgMonthlyTransaction(creditTransactionData, const$inBoundCredit)
}
debitTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundDebitType)
if (nrow(debitTransactionData) >= 1) {
calculateAvgMonthlyTransaction(debitTransactionData, const$inBoundDebit)
}
}
}
}
showOutput <- function(accountNumber) {
print(alertsGenerated)
}
alertGeneration <- function() {
accounts <- factor(avgMonthlyCreditDebitTransaction$gbAccountNumber)
for (accountNumber in levels(accounts)) {
accountNumber <- as.numeric(accountNumber)
# Generate Alerts for Credit Transactions
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundCreditType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundCreditType, const$inBoundCredit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
# Generate Alerts for Debit Transaction
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundDebitType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundDebitType, const$inBoundDebit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
}
}
displayAlertsHighlights <- function() {
if(nrow(alertsGenerated) > 0) {
cat("---------- Alerts Generated ----------\n")
print(alertsGenerated)
cat("\n\n\n")
cat("---------- Highlights Generated ----------\n")
print(hlt$generateHighlight(alertsGenerated))
cat("\n\n\n")
}
}
alertsGenerateNameChange <- function() {
names(alertsGenerated) <<- c("Date", "AccountNumber", "InBound", "Amount")
}
readData()
avgMonthlyCreditTransactionAmount(transactionData)
alertGeneration()
alertsGenerateNameChange()
displayAlertsHighlights()
print(transactions$getAvgAmountEveryMonth(1234, "TRUE", transactionData))
# File imports
source("../Framework/Constants.r", local = const <- new.env())
source("../Framework/FileOperations.r", local = fileOperations <- new.env())
source("../Framework/Transactions.r", local = transactions <- new.env())
source("../Framework/PreviousAverageActivity.r", local = snroPAA <- new.env())
source("../Framework/Highlight.r", local = hlt <- new.env())
# Libraries
library(lubridate)
library(dplyr)
# Global variables
alertsGenerated <<- data.frame(
Date <- lubridate::Date(),
AccountNumber <- integer(),
InBound <- logical(),
Amount <- double()
)
gbAccountNumber <<- c()
gbAvgAmount <<- c()
gbInBound <<- c()
avgMonthlyCreditDebitTransaction <<- data.frame(
gbAccountNumber <- integer(),
gbAvgAmount <- double(),
gbInBound <- character()
)
# Data Extraction
readData <- function() {
configData <<- fileOperations$readData(fileOperations$configurations, fileOperations$CSV)
transactionData <<- fileOperations$readData(fileOperations$transactions, fileOperations$CSV)
accountDetailsData <<- fileOperations$readData(fileOperations$accountDetails, fileOperations$CSV)
}
addAccountTransactionDetails <- function(accountNumber, avgAmount, inBound) {
# Create a new transaction record for storing the average amount for the account number and inbound type
# Condition - To ensure no account number is repeated for same inbound type
if (nrow(subset(avgMonthlyCreditDebitTransaction, avgMonthlyCreditDebitTransaction$gbAccountNumber == accountNumber & avgMonthlyCreditDebitTransaction$gbInBound == inBound)) == 0) {
gbAccountNumber <<- accountNumber
gbAvgAmount <<- avgAmount
gbInBound <<- inBound
avgMonthlyCreditDebitTransaction <<- rbind(avgMonthlyCreditDebitTransaction, data.frame(gbAccountNumber, gbAvgAmount, gbInBound))
}
}
calculateAvgMonthlyTransaction <- function(data, inBound) {
avgAmount <- transactions$calculateAvgMonthlyTransaction(data, inBound, configData)
addAccountTransactionDetails(unique(data$AccountNumber), avgAmount, inBound)
}
avgMonthlyCreditTransactionAmount <- function(data) {
# Extracting distinct account numbers using factor object
accountNumbers <- factor(data$AccountNumber)
for(currentAccountNumber in levels(accountNumbers)) {
recordData <- subset(data, data$AccountNumber == currentAccountNumber)
recordData <- subset(recordData, format(as.Date(recordData$Date), "%Y-%m") != format(as.Date(Sys.Date()), "%Y-%m"))
if (nrow(recordData) >=1 ) {
creditTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundCreditType)
if (nrow(creditTransactionData) >= 1) {
calculateAvgMonthlyTransaction(creditTransactionData, const$inBoundCredit)
}
debitTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundDebitType)
if (nrow(debitTransactionData) >= 1) {
calculateAvgMonthlyTransaction(debitTransactionData, const$inBoundDebit)
}
}
}
}
showOutput <- function(accountNumber) {
print(alertsGenerated)
}
alertGeneration <- function() {
accounts <- factor(avgMonthlyCreditDebitTransaction$gbAccountNumber)
for (accountNumber in levels(accounts)) {
accountNumber <- as.numeric(accountNumber)
# Generate Alerts for Credit Transactions
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundCreditType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundCreditType, const$inBoundCredit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
# Generate Alerts for Debit Transaction
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundDebitType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundDebitType, const$inBoundDebit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
}
}
displayAlertsHighlights <- function() {
if(nrow(alertsGenerated) > 0) {
cat("---------- Alerts Generated ----------\n")
print(alertsGenerated)
cat("\n\n\n")
cat("---------- Highlights Generated ----------\n")
print(hlt$generateHighlight(alertsGenerated))
cat("\n\n\n")
}
}
alertsGenerateNameChange <- function() {
names(alertsGenerated) <<- c("Date", "AccountNumber", "InBound", "Amount")
}
readData()
avgMonthlyCreditTransactionAmount(transactionData)
alertGeneration()
alertsGenerateNameChange()
displayAlertsHighlights()
print(transactions$getAvgAmountEveryMonth(1234, "TRUE", transactionData))
# File imports
source("../Framework/Constants.r", local = const <- new.env())
source("../Framework/FileOperations.r", local = fileOperations <- new.env())
source("../Framework/Transactions.r", local = transactions <- new.env())
source("../Framework/PreviousAverageActivity.r", local = snroPAA <- new.env())
source("../Framework/Highlight.r", local = hlt <- new.env())
# Libraries
library(lubridate)
library(dplyr)
# Global variables
alertsGenerated <<- data.frame(
Date <- lubridate::Date(),
AccountNumber <- integer(),
InBound <- logical(),
Amount <- double()
)
gbAccountNumber <<- c()
gbAvgAmount <<- c()
gbInBound <<- c()
avgMonthlyCreditDebitTransaction <<- data.frame(
gbAccountNumber <- integer(),
gbAvgAmount <- double(),
gbInBound <- character()
)
# Data Extraction
readData <- function() {
configData <<- fileOperations$readData(fileOperations$configurations, fileOperations$CSV)
transactionData <<- fileOperations$readData(fileOperations$transactions, fileOperations$CSV)
accountDetailsData <<- fileOperations$readData(fileOperations$accountDetails, fileOperations$CSV)
}
addAccountTransactionDetails <- function(accountNumber, avgAmount, inBound) {
# Create a new transaction record for storing the average amount for the account number and inbound type
# Condition - To ensure no account number is repeated for same inbound type
if (nrow(subset(avgMonthlyCreditDebitTransaction, avgMonthlyCreditDebitTransaction$gbAccountNumber == accountNumber & avgMonthlyCreditDebitTransaction$gbInBound == inBound)) == 0) {
gbAccountNumber <<- accountNumber
gbAvgAmount <<- avgAmount
gbInBound <<- inBound
avgMonthlyCreditDebitTransaction <<- rbind(avgMonthlyCreditDebitTransaction, data.frame(gbAccountNumber, gbAvgAmount, gbInBound))
}
}
calculateAvgMonthlyTransaction <- function(data, inBound) {
avgAmount <- transactions$calculateAvgMonthlyTransaction(data, inBound, configData)
addAccountTransactionDetails(unique(data$AccountNumber), avgAmount, inBound)
}
avgMonthlyCreditTransactionAmount <- function(data) {
# Extracting distinct account numbers using factor object
accountNumbers <- factor(data$AccountNumber)
for(currentAccountNumber in levels(accountNumbers)) {
recordData <- subset(data, data$AccountNumber == currentAccountNumber)
recordData <- subset(recordData, format(as.Date(recordData$Date), "%Y-%m") != format(as.Date(Sys.Date()), "%Y-%m"))
if (nrow(recordData) >=1 ) {
creditTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundCreditType)
if (nrow(creditTransactionData) >= 1) {
calculateAvgMonthlyTransaction(creditTransactionData, const$inBoundCredit)
}
debitTransactionData <- subset(recordData, recordData$InBound %in% const$inBoundDebitType)
if (nrow(debitTransactionData) >= 1) {
calculateAvgMonthlyTransaction(debitTransactionData, const$inBoundDebit)
}
}
}
}
showOutput <- function(accountNumber) {
print(alertsGenerated)
}
alertGeneration <- function() {
accounts <- factor(avgMonthlyCreditDebitTransaction$gbAccountNumber)
for (accountNumber in levels(accounts)) {
accountNumber <- as.numeric(accountNumber)
# Generate Alerts for Credit Transactions
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundCreditType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundCreditType, const$inBoundCredit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
# Generate Alerts for Debit Transaction
if(nrow(subset(transactionData, transactionData$AccountNumber == accountNumber & transactionData$InBound %in% const$inBoundDebitType) >= 1)) {
checkForAlert <- snroPAA$alertGenerator(accountNumber, const$inBoundDebitType, const$inBoundDebit, configData)
if (nrow(checkForAlert) > 0) {
# Alert generated added to the dataframe
alertsGenerated <<- rbind(alertsGenerated, checkForAlert)
}
}
}
}
displayAlertsHighlights <- function() {
if(nrow(alertsGenerated) > 0) {
cat("---------- Alerts Generated ----------\n")
print(alertsGenerated)
cat("\n\n\n")
cat("---------- Highlights Generated ----------\n")
print(hlt$generateHighlight(alertsGenerated))
cat("\n\n\n")
}
}
alertsGenerateNameChange <- function() {
names(alertsGenerated) <<- c("Date", "AccountNumber", "InBound", "Amount")
}
readData()
avgMonthlyCreditTransactionAmount(transactionData)
alertGeneration()
alertsGenerateNameChange()
displayAlertsHighlights()
print(transactions$getAvgAmountEveryMonth(1234, "TRUE", transactionData))
?sd
sd(c(16000, 10000))
setwd("D:/Study/Learning/R/ML Course/K Means Clustering")
library(factoextra)
library(class)
library(scorecard)
library(caTools)
# data
data = iris[1:4]
# Scaled Data
scaledData <- scale(data)
# Calculating distance
distData <- dist(scaledData, method = "euclidean")
# Row names
rownames(scaledData) <- paste(iris$Species, 1:dim(iris)[1], sep = "_")
# Creating clustering model
hc_iris <- hclust(distData, method = "complete")
# labeling data
hc_iris$labels <- levels(iris$Species)
# Groups
groups <- cutree(hc_iris, k = 1)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
# labeling data
hc_iris$labels <- levels(iris$Species)
# Groups
groups <- cutree(hc_iris, k = 2)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
data <- read.csv("C:\\Users\\Chaitanya Shejwal\\Desktop\\dummyData.csv")
data <- read.csv("C:\\Users\\Chaitanya Shejwal\\Desktop\\dummyData.csv")
data <- read.csv("C:\\Users\\Chaitanya Shejwal\\Desktop\\dummyData.csv")
# Scaled Data
scaledData <- scale(data)
# Calculating distance
distData <- dist(scaledData, method = "euclidean")
# Creating clustering model
hc_iris <- hclust(distData, method = "complete")
# Groups
groups <- cutree(hc_iris, k = 2)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
randomData <- data[1:2][sample(1:nrow(data), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 2, cl = groups)
hc_iris$labels[predictedData]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
# data
data = iris[1:4]
# Scaled Data
scaledData <- scale(data)
# Calculating distance
distData <- dist(scaledData, method = "euclidean")
# Row names
rownames(scaledData) <- paste(iris$Species, 1:dim(iris)[1], sep = "_")
# Creating clustering model
hc_iris <- hclust(distData, method = "complete")
# labeling data
hc_iris$labels <- levels(iris$Species)
# Groups
groups <- cutree(hc_iris, k = 3)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
class(levels(iris$Species))
test <- levels(iris$Species)
test
typeof(test)
# data
data = iris[1:4]
# Scaled Data
scaledData <- scale(data)
# Calculating distance
distData <- dist(scaledData, method = "euclidean")
# Row names
rownames(scaledData) <- paste(iris$Species, 1:dim(iris)[1], sep = "_")
# Creating clustering model
hc_iris <- hclust(distData, method = "complete")
# labeling data
hc_iris$labels <- levels(iris$Species)
# Groups
groups <- cutree(hc_iris, k = 2)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
# Predicting new data
randomData <- iris[1:4][sample(1:nrow(iris), size = 1),]
randomData$Sepal.Length = 15.9
randomData$Sepal.Width = 10
randomData$Petal.Length = 15
randomData$Petal.Width = 5
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
randomData$Sepal.Length = 25.9
randomData$Sepal.Width = 20
randomData$Petal.Length = 25
randomData$Petal.Width = 25
predictedData <- knn(train = data, test = randomData, k = 1, cl = groups)
hc_iris$labels[predictedData]
day(ceiling_date(Sys.Date(), "months") - 1)
data <- read.csv("C:\\Users\\Chaitanya Shejwal\\Desktop\\dummyData.csv")
data <- read.csv("C:\\Users\\Chaitanya Shejwal\\Desktop\\dummyData.csv")
# Scaled Data
scaledData <- scale(data)
# Calculating distance
distData <- dist(scaledData, method = "euclidean")
View(data)
# Creating clustering model
hc_iris <- hclust(distData, method = "complete")
hc_iris$labels <- c("Normal", "Abnormal")
# Groups
groups <- cutree(hc_iris, k = 2)
# plotting the data
fviz_cluster(list(data = scaledData, cluster = groups))
library(e1071)
?svm
# Library import
library(e1071)
library(caTools)
# Utilizing the inbuild dataset provided by R
plot(iris)
# plotting and color coding species
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species) # The data points are not scattered according to class. Thus, creating ideal hyperlane is not possible in linear SVM
plot(iris$Petal.Length, iris$Petal.Width, col = iris$Species) # The data is mostly scattered according to class, but there are few data points that are overlapping
# Sampling data set
sample <- sample.split(iris, SplitRatio = 0.7)
col <- c("Petal.Length", "Petal.Width", "Species")
train <- subset(iris, sample == TRUE)[, col]
test <- subset(iris, sample == FALSE)[, col]
# Model Generation
svmFit <- svm(Species ~., data = train, kernel = "linear", cost = 100, scale = FALSE)
print(svmFit)
# plot model
plot(svmFit, train[, col])
# Tuning the model for getting the best parameters
tuneModel <- tune(svm, Species ~., data = train, kernel = "linear", ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tuneModel)
# Prediction
p <- predict(svmFit, test, type = "class")
plot(p)
# Cross check predictions
table(p, test[,3])
# Accuracy
mean(p == test[, 3])
cat(mean(p == test[, 3]))
iris["Sepal.Width"]
iris[, 2]
class(iris[, 2])
type(iris["Sepal.Width"])
class(iris["Sepal.Width"])
as.vector(iris["Sepal.Width"])
class(iris[, 2])
iris[, 2]
tuneModel$cost
tuneModel$best.parameters$cost
seq(as.Date("2022-05-01"), as.Date("2022-06-30"))
seq(as.Date("2022-05-01"), as.Date("2022-06-30"), size = 10)
rnorm(100, mean = 20000, sd = 1)
rnorm(100, mean = 20000, sd = 2)
rnorm(100, mean = 20000, sd = 5)
rnorm(100, mean = 20000, sd = 10)
rnorm(100, mean = 20000, sd = 20)
rnorm(100, mean = 20000, sd = 50)
rnorm(100, mean = 20000, sd = 1000)
rnorm(100, mean = 20000, sd = 100000)
rnorm(100, mean = 20000, sd = 10000)
rnorm(100, mean = 20000, sd = 5000)
seq(as.Date("2022-05-01"), as.Date("2022-06-30"), by = 1)
rnorm(61, mean = 20000, sd = 5000)
rnorm(61, mean = 20000, sd = 1000)
rnorm(61, mean = 20000, sd = 2000)
rnorm(61, mean = 20000, sd = 3000)
?write.csv
Sys.Date()
Sys.Date() - as.Date("2022-01-22")
test <- Sys.Date() - as.Date("2022-01-22")
test
