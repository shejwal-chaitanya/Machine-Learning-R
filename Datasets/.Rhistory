as.Date("Nov/03/1990", format="%b/%d/%y%y")
# %B full month name
# %Y year in 4 digits
as.Date("November-03-1994", format="%B-%d-%Y")
install.packages("nycflights13")
library(nycflights13)
View(flights)
head(flights)
# Subset dataset using filter()
f1 <- filter(flights, month == 7)
# Subset dataset using filter()
f1 <- filter(flights, month == 07)
# Subset dataset using filter()
f1 <- filter(flights, month==07)
# Subset dataset using filter()
f1 <- filter(flights, month==7)
# Subset dataset using filter()
f1 <- filter(flights, flights$month==7)
View(f1)
# Subset dataset using filter()
f1 <- filter(flights, flights$month==07)
View(f1)
f1
# Subset dataset using filter()
f1 <- dplyr::filter(flights, month==07)
View(f1)
f1 <- dplyr::filter(flights, month==07, day==3)
f1 <- dplyr::filter(flights, month==09, day==2, origin=="LGA")
# OR
f1 <- dplyr::filter(flights[flights$$month==09 & flights$day==2, ])
# OR
f1 <- dplyr::filter(flights[flights$month==09 & flights$day==2, ])
# slicing
dplyr::slice(flights, 1:5)
slice(flights, 5:10)
library(dplyr)
# Mutate() used to add new column
over_delay <- mutate(flights, overall_delay=arr_delay-dep_delay)
over_delay
View(over_delay)
# Transmute method - used to only create the new column
over_delay <- transmute(flights, overall_delay = arr_delay - dep_delay)
View(over_delay)
# summarise() method
summarise(flights, avg_air_time=mean(air_time, na.rm = TRUE))
summarise(flights, avg_air_time=sum(air_time, na.rm = TRUE))
summarise(flights, avg_air_time=mean(air_time, na.rm = TRUE), total_air_time=sum(air_time, na.rm=TRUE))
# Groupby
head(mtcars)
by_gear <- mtcars %>% group_by(gear)
by_gear
summarise(group_by(mtcars,cyl), mean(gear, na.rm = TRUE))
a <- summarise(by_gear, gear1=sum(gear, na.rm = TRUE), gear2=mean(gear, na.rm = TRUE))
a
# arrange() used to sort dataset
View(arrange(flights, year, dep_time))
# arrange() used to sort dataset
View(arrange(flights, day, dep_time))
# Nesting
result <- arrange(sample_n(filter(mtcars, mpg>20), size = 5))
result
# Nesting
result <- arrange(sample_n(filter(mtcars, mpg>20), size = 5), desc(mpg))
result
# Same using pipe operator
result <- mtcars %>% filter(mpg>20) %>% sample_n(size=10) %>% arrange(desc(mpg))
result
# select method
mpg_cyl_hp <- mtcars %>% select(mpg, cyl, hp)
head(mpg_cyl_hp)
#### tidyr package ####
install.packages("tidyr")
library(tidyr)
wide <- data.frame(
ID = c(1:n),
Face.1 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
n = 10
wide <- data.frame(
ID = c(1:n),
Face.1 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
View(wide)
# Gather method - reshaping data from wide format to long format
long <- wide %>% gather(Face, ResponseTime, Face.1:Face.3)
View(long)
View(wide)
# Gather method - reshaping data from wide format to long format
Face
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number"))
View(long_seperate)
wide <- data.frame(
ID = c(1:n),
Face.1.4 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2.5 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3.6 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number"))
View(long_seperate)
View(wide)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number1", "Number2"))
View(long_seperate)
wide <- data.frame(
ID = c(1:n),
Face.1 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number"))
View(long_seperate)
wide <- data.frame(
ID = c(1:n),
Face.1.4 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2.5 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3.6 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
# Gather method - reshaping data from wide format to long format
# Here, Face & ResponseTime are the names of the columns
# Face will take values like Face.1, Face.2
# ResponseTime will store the value of each Face.1 or Face.2 or Face.3
long <- wide %>% gather(Face, ResponseTime, Face.1.4:Face.3.6)
View(long)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number"))
View(long_seperate)
View(long)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number", "VALUE"))
View(long_seperate)
wide <- data.frame(
ID = c(1:n),
Face.1 = c(411, 723, 325, 456, 579, 612, 709, 513, 527, 379),
Face.2 = c(123, 300, 400, 500, 600, 654, 789, 906, 413, 567),
Face.3 = c(1457, 1000, 569, 896, 965, 2345, 780, 599, 1023, 678)
)
# Gather method - reshaping data from wide format to long format
# Here, Face & ResponseTime are the names of the columns
# Face will take values like Face.1, Face.2
# ResponseTime will store the value of each Face.1 or Face.2 or Face.3
long <- wide %>% gather(Face, ResponseTime, Face.1:Face.3)
# separate method - splits a single column into multiple columns
long_seperate <- long %>% separate(Face, c("Target", "Number"))
# Unite method - combines multiple columns into single column
long_unite <- long_seperate %>% unite(Face, Target, Number, sep=".")
View(long_unite)
View(long_unite)
# spread method - takes two columns (key & value) and spreads in to multiple columns
# makes data wider
back_to_wide <- long_unite %>% spread(Face, ResponseTime)
View(back_to_wide)
library(datasets)
plot(ChickWeight)
# base graphics
library(MASS)
plot(UScereal$sugars, UScereal$calories)
title("plot(UScereal$sugars, UScereal$calories)")
x <- UScereal$sugars
y <- UScereal$calories
library(grid)
# Grid graphics
pushViewport(plotViewport())
pushViewport(dataViewport(x, y))
grid.rect()
grid.xaxis()
grid.yaxis()
grid.points(x, y)
grid.text("UScereal$calories", x = unit(-3, "lines"), rot = 90)
# Grid graphics
pushViewport(plotViewport())
pushViewport(dataViewport(x, y))
grid.rect()
grid.xaxis()
grid.yaxis()
grid.points(x, y)
grid.text("UScereal$calories", x = unit(-3, "lines"), rot = 90)
grid.text("UScereal$sugars", y = unit(-3, "lines"), rot = 0)
plot(UScereal$sugars, UScereal$calories)
title("plot(UScereal$sugars, UScereal$calories)")
x <- UScereal$sugars
y <- UScereal$calories
library(grid)
# Grid graphics
pushViewport(plotViewport())
pushViewport(dataViewport(x, y))
grid.rect()
grid.xaxis()
grid.yaxis()
grid.points(x, y)
grid.text("UScereal$calories", x = unit(-3, "lines"), rot = 90)
grid.text("UScereal$sugars", y = unit(-3, "lines"), rot = 0)
grid.circle()
# Grid graphics
pushViewport(plotViewport())
pushViewport(dataViewport(x, y))
grid.circle()
grid.xaxis()
grid.yaxis()
grid.points(x, y)
# base graphics
library(MASS)
plot(UScereal$sugars, UScereal$calories)
title("plot(UScereal$sugars, UScereal$calories)")
# 3D pie charts
install.packages("plotrix")
# 3D pie charts
library(plotrix)
x <- c(33, 45, 70, 110)
lbl <- c("Soap", "Detergent", "Oil", "Shampoo")
pie3D(x, labels=lbl, explore=0.1, main="Pie chart of countries")
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-18.0.1.1")
Sys.getenv("JAVA_HOME")
library(rpart)
library(caret)
library(rpart.plot)
library(dplyr)
library(data.tree)
library(caTools)
install.packages("ElemStatLearn")
R -version
R.version()
R.Version()
R --version
install.packages("installr")
library(installr)
updateR()
library(FSelector)
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-18.0.1.1")
library(FSelector)
install.packages("FSelector")
library(FSelector)
install.packages("rJava")
library(FSelector)
library(rpart)
library(caret)
install.packages("caret")
library(caret)
install.packages("ggplot2")
library(caret)
install.packages("R6")
library(caret)
install.packages("dplyr")
library(caret)
install.packages("lubridate")
library(caret)
library(rpart.plot)
library(dplyr)
library(data.tree)
library(caTools)
install.packages("caTools")
library(caTools)
library(ElemStatLearn)
install.packages("ElemStatLearn")
setwd(r"D:\Study\Learning\R\ML Course\Datasets")
setwd("D:\\Study\\Learning\\R\\ML Course\\Datasets")
# Import data
shipData <- read.csv("ship.csv")
View(shipData)
# Import data
shipData <- read.csv("ship.csv", na.rm = TRUE)
shipData <- shipData$Age(na.rm = TRUE)
shipData <- subset(shipData, na.rm = TRUE)
View(shipData)
shipData <- subset(shipData, is.finite(as.numeric(Age)))
View(shipData)
View(shipData)
# Import data
shipData <- read.csv("ship.csv")
# Selecting only meaningful columns
shipData <- select(shipData, Survived, PClass, Sex, Age)
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
View(shipData)
shipData <- mutate(shipData, survived = factor(Survived), class = as.numeric(Pclass), age = as.numeric(Age))
View(shipData)
# Splitting data
set.seed(123)
sample = sample.split(shipData$survived, SplitRatio = 0.70)
train = subset(df, sample == TRUE)
train = subset(shipData, sample == TRUE)
test = subset(shipData, sample == FALSE)
# Training the decision tree classifier
tree <- rpart(survived ~., data = train)
View(tree)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Confusion maatrix for evaluating the model
confusionMatrix(tree.survived.predicted, test$survived)
# Visualizing the decision tree
prp(tree)
View(tree)
# Import data
shipData <- read.csv("ship.csv")
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
newShipData <- mutate(shipData, survived = factor(Survived), class = as.numeric(Pclass), age = as.numeric(Age))
# Splitting data
set.seed(123)
sample = sample.split(newShipData$survived, SplitRatio = 0.70)
train = subset(newShipData, sample == TRUE)
test = subset(newShipData, sample == FALSE)
# Training the decision tree classifier
tree <- rpart(survived ~., data = train)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Confusion matrix for evaluating the model
confusionMatrix(tree.survived.predicted, test$survived)
# Visualizing the decision tree
prp(tree)
View(newShipData)
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
newShipData <- mutate(shipData, Survived = factor(Survived), Pclass = as.numeric(Pclass), Age = as.numeric(Age))
# Splitting data
set.seed(123)
sample = sample.split(newShipData$survived, SplitRatio = 0.70)
train = subset(newShipData, sample == TRUE)
test = subset(newShipData, sample == FALSE)
# Training the decision tree classifier
tree <- rpart(survived ~., data = train)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Training the decision tree classifier
tree <- rpart(Survived ~., data = train)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Confusion matrix for evaluating the model
confusionMatrix(tree.survived.predicted, test$Survived)
# Visualizing the decision tree
prp(tree)
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "response")
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
print(survival)
survival > 0
as.vector(survival)
as.vector(survival) > 1
as.vector(survival) < 1
# Result
if (as.vector(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.vector(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.vector(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
View(randomValue)
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.vector(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
typeof(as.vector(survival))
as.vector(survival) == 1
# Result
if (as.vector(survival) == "1") {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
survival
as.vector(survival)
survival
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
survival
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.vector(survival) == "1") {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
as.integer(survival)
# Result
if (as.integer(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.integer(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.integer(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
View(randomValue)
# Import data
shipData <- read.csv("ship.csv")
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age, na.rm = TRUE)
shipData <- subset(shipData, na.rm = TRUE)
# Import data
shipData <- read.csv("ship.csv")
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
shipData <- subset(shipData, na.rm = TRUE)
newShipData <- mutate(shipData, Survived = factor(Survived), Pclass = as.numeric(Pclass), Age = as.numeric(Age))
newShipData <- subset(newShipData, na.rm = TRUE)
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
newShipData <- mutate(shipData, Survived = factor(Survived), Pclass = as.numeric(Pclass), Age = as.numeric(Age))
# Splitting data
set.seed(123)
sample = sample.split(newShipData$survived, SplitRatio = 0.70)
train = subset(newShipData, sample == TRUE)
test = subset(newShipData, sample == FALSE)
# Training the decision tree classifier
tree <- rpart(Survived ~., data = train)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Confusion matrix for evaluating the model
confusionMatrix(tree.survived.predicted, test$Survived)
# Visualizing the decision tree
prp(tree)
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
View(randomValue)
View(newShipData)
# Import data
shipData <- read.csv("ship.csv")
# Selecting only meaningful columns
shipData <- select(shipData, Survived, Pclass, Sex, Age)
newShipData <- mutate(shipData, Survived = factor(Survived), Pclass = as.numeric(Pclass), Age = as.numeric(Age))
newShipData <- na.omit(newShipData)
# Splitting data
set.seed(123)
sample = sample.split(newShipData$survived, SplitRatio = 0.70)
train = subset(newShipData, sample == TRUE)
test = subset(newShipData, sample == FALSE)
# Training the decision tree classifier
tree <- rpart(Survived ~., data = train)
# Predictions
tree.survived.predicted <- predict(tree, test, type="class")
# Confusion matrix for evaluating the model
confusionMatrix(tree.survived.predicted, test$Survived)
# Visualizing the decision tree
prp(tree)
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
View(randomValue)
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.integer(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
# Predicting any random value
randomValue <- newShipData[sample(1:nrow(newShipData), size = 1), ]
# Survival prediction
survival <- predict(tree, randomValue, type = "class")
# Result
if (as.integer(survival) == 1) {
cat("Congratulations, you survived")
} else {
cat("Rest in peace!")
}
View(randomValue)
library(randomForest)
help(randomForest)
